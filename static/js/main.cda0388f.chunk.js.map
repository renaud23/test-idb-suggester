{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","COG_FIELDS","name","CustomCOGOption","suggestion","com","libelle","className","fetchCommunes","a","fetch","then","data","json","communes","map","commune","i","id","App","useState","undefined","store","setStore","useEffect","createStore","init","src","logo","alt","style","width","version","fields","placeHolder","optionComponent","displayPath","onSelect","item","console","log","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,yOCOrCC,G,YAAa,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,OAAS,CAAEA,KAAM,YAElE,SAASC,EAAT,GAA0C,IAAfC,EAAc,EAAdA,WACjBC,EAAiBD,EAAjBC,IAAKC,EAAYF,EAAZE,QACb,OACE,yBAAKC,UAAU,qBACb,0BAAMA,UAAU,OAAOF,GACvB,0BAAME,UAAU,WAAWD,I,SAKlBE,I,2EAAf,4BAAAC,EAAA,sEACyBC,MAAM,uBAAuBC,MAAK,SAACC,GAAD,OACvDA,EAAKC,UAFT,cACQC,EADR,yBAISA,EAASC,KAAI,SAAUC,EAASC,GAAI,IACjCZ,EAAQW,EAARX,IACR,OAAO,2BAAKW,GAAZ,IAAqBE,GAAG,OAAD,OAASD,EAAT,YAAcZ,SANzC,4C,sBAyDec,MA/Cf,WAAgB,IAAD,EACaC,wBAASC,GADtB,mBACNC,EADM,KACCC,EADD,KASb,OAPAC,qBAAU,WAAY,4CACpB,sBAAAf,EAAA,kEACEc,EADF,SACiBE,sBA3BA,WA2B0B,EAAGxB,GAD9C,8EADoB,uBAAC,WAAD,wBAKpByB,KACC,IACEJ,EAIH,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKoB,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,SAEzC,yBAAKC,MAAO,CAAEC,MAAO,UACnB,kBAAC,eAAD,CACE7B,KA1CS,WA2CT8B,QAAS,EACTC,OAAQhC,EACRS,MAAOF,IAET,kBAAC,YAAD,CACEc,MAAOA,EACPY,YAAY,0BACZC,gBAAiBhC,EACjBiC,YAAY,UACZC,SAAU,SAAUC,GAClBC,QAAQC,IAAI,WAAYF,OAI9B,uBACE/B,UAAU,WACVkC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,iBAxBG,MC3BSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,gEACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.cda0388f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport { createStore, Suggester, StoreManager } from \"idb-suggester\";\nimport \"./App.scss\";\nimport \"./custom-option.scss\";\n\nconst COG_IDB_NAME = \"TEST/COG\";\nconst COG_FIELDS = [{ name: \"libelle\" }, { name: \"com\" }, { name: \"nccenr\" }];\n\nfunction CustomCOGOption({ suggestion }) {\n  const { com, libelle } = suggestion;\n  return (\n    <div className=\"custom-cog-option\">\n      <span className=\"com\">{com}</span>\n      <span className=\"libelle\">{libelle}</span>\n    </div>\n  );\n}\n\nasync function fetchCommunes() {\n  const communes = await fetch(\"/communes-2019.json\").then((data) =>\n    data.json()\n  );\n  return communes.map(function (commune, i) {\n    const { com } = commune;\n    return { ...commune, id: `COM-${i}-${com}` };\n  });\n}\n\nfunction App() {\n  const [store, setStore] = useState(undefined);\n  useEffect(function () {\n    async function init() {\n      setStore(await createStore(COG_IDB_NAME, 1, COG_FIELDS));\n    }\n\n    init();\n  }, []);\n  if (!store) {\n    return null;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <div style={{ width: \"250px\" }}>\n          <StoreManager\n            name={COG_IDB_NAME}\n            version={1}\n            fields={COG_FIELDS}\n            fetch={fetchCommunes}\n          />\n          <Suggester\n            store={store}\n            placeHolder=\"Rechercher dans le COG.\"\n            optionComponent={CustomCOGOption}\n            displayPath=\"libelle\"\n            onSelect={function (item) {\n              console.log(\"onSelect\", item);\n            }}\n          />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Test in CRA app. French communes.</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}